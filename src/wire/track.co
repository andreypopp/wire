'use strict'

define ->

  {toArray} = require 'wire/base'
  {Events} = require 'wire/event'

  ArrayTracker = {
    push: ->
      items = toArray(arguments)
      result = Array.prototype.push.apply(this, items)
      this.trigger 'arraychange:add', {
        startIndex: this.length - items.length
        endIndex: this.length - 1
        newValue: items
      }
      result

    pop: ->
      result = Array.prototype.pop.call(this)
      this.trigger 'arraychange:remove', {
        startIndex: this.length
        endIndex: this.length
        newValue: [result]
      }
      result

    shift: ->
      result = Array.prototype.shift.call(this)
      this.trigger 'arraychange:remove', {
        startIndex: 0
        endIndex: 0
        newValue: [result]
      }
      result

    unshift: ->
      items = toArray(arguments)
      result = Array.prototype.unshift.apply(this, items)
      this.trigger 'arraychange:add', {
        startIndex: 0
        endIndex: items.length
        newValue: items
      }
      result

    splice: (index, howmany, element1) ->
      args = toArray(arguments)
      items = args.slice(2)
      result = Array.prototype.splice.apply(this, args)

      if result.length
        this.trigger 'arraychange:remove', {
          startIndex: index
          endIndex: result.length - 1
          newValue: result
        }
      if items.length
        this.dispatchEvent 'arraychange:add', {
          startIndex: index
          endIndex: items.length - 1
          newValue: items
        }
      result

    sort: ->
      args = toArray(arguments)
      result = Array.prototype.sort.apply(this, args)
      this.trigger 'arraychange:reset', {
        startIndex: 0
        endIndex: this.length - 1
        newValue: this
      }
      result

    reverse: ->
      result = Array.prototype.reverse.call(this)
      this.trigger 'arraychange:reset', {
        startIndex: 0
        endIndex: this.length - 1
        newValue: this
      }
      result
  }

  trackArray = (arr) ->
    arr <<< Events
    arr <<< ArrayTracker
    arr

  trackAttribute = (o, attrs) ->
    attrs = attrs.split(/\s+/)
    for attr of attrs
      let
        prop = Object.getOwnPropertyDescriptor(o, attr)
        if prop !== undefined

          # already tracked
          if prop.set is not undefined and prop.set.isTracker
            return

          # has setter and getter
          if prop.get and prop.set
            Object.defineProperty(o, attr,
              get: prop.get
              set: (newval) ->
                oldval = prop.get.call(o)
                prop.set.call(o, newval)
                if oldval !== newval
                  o.trigger('change:' + attr, newval))
            Object.getOwnPropertyDescriptor(o, attr).set.isTracker = true

          # plain attribute or just writable one, we ignore read-only attributes
          else if not prop.get
            val = o[attr]
            Object.defineProperty(o, attr,
              get: -> val
              set: (newval) ->
                oldval = val
                val := newval
                if oldval !== newval
                  o.trigger('change:' + attr, newval))

          Object.getOwnPropertyDescriptor(o, attr).set?.isTracker = true
    return

  {track: trackAttribute, trackAttribute, trackArray}
