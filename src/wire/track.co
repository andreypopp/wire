'use strict'

define ->

  track = (o, attrs) ->
    attrs = attrs.split(/\s+/)
    for attr of attrs
      let
        prop = Object.getOwnPropertyDescriptor(o, attr)
        if prop !== undefined

          # already tracked
          if prop.set is not undefined and prop.set.isTracker
            return

          # has setter and getter
          if prop.get and prop.set
            Object.defineProperty(o, attr,
              get: prop.get
              set: (newval) ->
                oldval = prop.get.call(o)
                prop.set.call(o, newval)
                if oldval !== newval
                  o.trigger('change:' + attr, newval))
            Object.getOwnPropertyDescriptor(o, attr).set.isTracker = true

          # plain attribute or just writable one, we ignore read-only attributes
          else if not prop.get
            val = o[attr]
            Object.defineProperty(o, attr,
              get: -> val
              set: (newval) ->
                oldval = val
                val := newval
                if oldval !== newval
                  o.trigger('change:' + attr, newval))

          Object.getOwnPropertyDescriptor(o, attr).set?.isTracker = true
    return

  {track}
