'use strict'

define ->

  extend = (o) ->
    for x of Array::slice.call(arguments, 1)
      for key in x
        o[key] = x[key]
    o

  class Base

    @extended = (sub) ->
      sub.mixin = this.mixin
      sub.extended = this.extended

    @mixin = ->
      extend(this::, ...arguments)
      for x of Array::slice.call(arguments)
        x.extended?(this)
      this

  idCounter = 0

  genId = (prefix) ->
    id = idCounter++
    if prefix then prefix + id else '' + id

  path = (o, p) ->
    if not p
      return o
    for p of p.split('.')
      o = o[p]
      if o is undefined
        return o
    return o

  {genId, extend, Base, path}
