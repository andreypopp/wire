
define (require) ->

  {Base, genId} = require 'wire/base'
  {Events} = require 'wire/event'

  class Domain extends Base
    @mixin Events

    ->
      this.models = {}

    commit: ->
      for id in this.models
        {bindings, state, model} = this.models[id]
        for attr in state
          if model[attr] !== state[attr]
            diff = {prev: state[attr], curr: model[attr]}
            for cb of bindings[attr]
              cb(diff)
            state[attr] = model[attr]

    rollback: ->
      for id in this.models
        {state, model} = this.models[id]
        model <<< state

    destroy: (id) ->
      delete this.models[id]

    track: (model, cb, id, ...attrs) ->
      if not (id in this.models)
        this.models[id] = {bindings: {}, state: {}, model: model}

      {bindings, state} = this.models[id]

      for attr of attrs
        if attr in bindings
          bindings[attr].push(cb)
        else
          state[attr] = model[attr]
          bindings[attr] = [cb]


  window.g = globalDomain = new Domain()

  commit = ->
    globalDomain.commit(...arguments)
  rollback = ->
    globalDomain.rollback(...arguments)
  destroy = ->
    globalDomain.destroy(...arguments)
  track = ->
    globalDomain.track(...arguments)

  class DummyPersistenceStrategy

  class Repository extends Base
    @mixin Events

    persistence: new DummyPersistenceStrategy
    domain: globalDomain

    (options) ->
      this <<< options
      this.models = {}

    create: (data) ->
      model = new this.model(data)
      this.add(model)
      model

    add: (model) ->
      # check if object comes from another repo
      if not model.__cid__
        model.__cid__ = genId('model')
        this.models[__cid__] = model

    find: (id) ->
      this.models[id]

  eventSplitterRe = /\s+/

  class Model extends Base
    @mixin Events

    (data) ->
      this <<< data

    on: (events, callback, context) ->
      attrs = for ev of events.split(eventSplitterRe)
        if ev.slice(0, 7) === 'change:'
          attr = ev.slice(7)
          cb = let
            (o) ~> this.trigger(ev, o)
          this.__domain__.track(this, cb, this.__cid__, attr)
      Events.on ...

  {
    Domain, Repository, Model,
    globalDomain, rollback, commit, destroy, track
  }
