'use strict'

define (require) ->

  Event = require 'wire/Event'
  {Base, extend, path, genId} = require 'wire/base'

  eventSplitterRe = /\s+/

  specialAttributes = ['events']

  class BaseView extends Base
    @mixin Event

    tag: 'div'

    (options) ->
      this.id = genId 'view'

      for key, value in options
        if specialAttributes.indexOf(key) is -1
            this[key] = value

      if not this.el
        this.el = $(document.createElement(this.tag))

      events = options?.events or {}
      if this.events
        extend(events, this.events or {})
      if events
        this.bindEvents(events)

      this.events = events

    # Configure events of a view.
    #
    # @param {Object} events
    #   The event declaration table, keys can be of form
    #
    #     a '<eventname> <dom selector>'
    #       in that case there will be event handler attached to event
    #       <eventname> on DOM element selected by <dom selector>
    #
    #     b 'eventname this.<path>'
    #       in that case there will be event handler attached to event
    #       <eventname> on this.<path> attribute of a view
    #
    #   Values can be of form
    #
    #     a function () { ... }
    #       in that case function will be called on event
    #
    #     b '<functionname>'
    #       function will be looked up on View and bound to it and then called
    #       on event
    #
    #     c 'trigger <eventname>'
    #       event <eventname> will be fired on view on event
    #       this allows event propagation
    #
    bindEvents: (events) ->
      for k, v in events
        if not (typeof v is 'function')
          if v.slice(0, 8) is 'trigger '
            v = let
              ~> this.trigger(v.slice(8))
          else
            v = let
              ~> this[v].apply(this, arguments)
        [ev, pth] = k.split(eventSplitterRe)
        if pth is undefined
          this.el.bind("#{ev}.delegateEvents_#{this.id}", v)
        else if pth.slice(0, 5) is 'this.'
          path(this, pth.slice(5)).on(ev, v)
        else
          this.el.on("#{ev}.delegateEvents_#{this.id}", pth, v)

    unbindEvents: ->
      this.off()
      this.el.unbind(".delegateEvents_#{this.id}")

    # Scoped DOM selector
    #
    # @param {String} selector
    $: (selector) ->
      $(selector, this.el)

    dispose: ->
      this.unbindEvents()
      this.el.remove()

  {BaseView}
