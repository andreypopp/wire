"use strict"

((root, modulename, factory) ->
  if typeof define === 'function' and define.amd
    define ->
      root.wire = root.wire or {}
      root.wire[modulename] = factory()
  else
    root.wire = root.wire or {}
    root.wire[modulename] = factory())(this, 'track', ->

  _trackAttr = (o, attr) ->
    prop = Object.getOwnPropertyDescriptor(o, attr)
    if prop !== undefined
      if prop.set !== undefined and prop.set.isTracker
        return
      if prop.get and prop.set
        Object.defineProperty(o, attr,
          get: prop.get
          set: (newval) ->
            oldval = prop.get.call(o)
            prop.set.call(o, newval)
            if oldval !== newval
              o.trigger('change:' + attr, newval))
        Object.getOwnPropertyDescriptor(o, attr).set.isTracker = true
      else if not prop.get
        val = o[attr]
        Object.defineProperty(o, attr,
          get: -> val
          set: (newval) ->
            oldval = val
            val := newval
            if oldval !== newval
              o.trigger('change:' + attr, newval))
        Object.getOwnPropertyDescriptor(o, attr).set.isTracker = true

  (o, attrs) ->
    attrs = attrs.split(/\s+/)
    for k in attrs
      _trackAttr(o, attrs[k])
    return
)
