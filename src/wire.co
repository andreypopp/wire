'use strict'

((root, factory) ->
  if typeof define === 'function' and define.amd
    define ->
      root.wire = factory()
  else
    root.wire = factory())(this, ->

  extend = (o) ->
    for x of Array::slice.call(arguments, 1)
      for key in x
        o[key] = x[key]
    o

  class Base
    @extended = (sub) ->
      sub.mixin = this.mixin

    @mixin = ->
      extend(this::, ...arguments)

  idCounter = 0

  genId: (prefix) ->
    id = idCounter++
    if prefix then prefix + id else '' + id

  path: (o, p) ->
    if not p
      return o
    for p of p.split('.')
      o = o[p]
      if o is undefined
        return o
    return o

  extend: extend
  Base: Base
)
