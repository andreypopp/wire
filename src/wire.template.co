'use strict'

((root, modulename, factory) ->
  if typeof module === 'object'
    module.exports = factory()
  if typeof define === 'function' and define.amd
    define ->
      root.wire = root.wire or {}
      root.wire[modulename] = factory()
  else
    root.wire = root.wire or {}
    root.wire[modulename] = factory())(this, 'template', ->

  if typeof require !== 'undefined'
    sax = require('sax')
  else
    sax = window.sax

  class Compiler
    ->
      this.hasRoot = false
      this.lvl = 0
      this.buf = """
      var root, curr, parent;\n
      """

    w: (line) -> this.buf += line + '\n'
    newline: -> @w ''

    onopentag: (tag) ->
      @lvl++
      @w "console.log(#{@lvl});"
      @newline!
      if not this.hasRoot
        @w "root = curr = parent = document.createElement('#{tag.name}');"
        this.hasRoot = true
      else
        @w "parent = curr;"
        @w "curr = document.createElement('#{tag.name}');"
      @attributes tag.attributes

    onclosetag: (tagname) ->
      @lvl--
      @w "console.log(#{@lvl});"
      if @lvl > 0
        @w "parent.appendChild(curr);"
        @w "parent = parent.parentNode; curr = curr.parentNode;"
      @newline!

    ontext: (text) ->
      @w "curr.appendChild(document.createTextNode('#{text}'));"

    onend: ->
      @w "return root;"

    attributes: (attrs) ->
      for own k, v in attrs
        @w "curr.setAttribute('#{k}', '#{v.value}');"

    getResult: ->
      "function(ctx) {\n#{this.buf}\n};"

  compile = (text) ->
    parser = sax.parser(true, {xmlns: true})
    compiler = new Compiler

    parser.onopentag = (t) ->
      compiler.onopentag(t)

    parser.onclosetag = ->
      compiler.onclosetag(this.tag)

    parser.ontext = (t) ->
      compiler.ontext(t)

    parser.onend = ->
      compiler.onend()

    parser.write(text).close()

    result = {}
    eval("result.template = #{compiler.getResult()}")
    result.template

  {compile, Compiler}
  )
