define (require) ->

  {parse} = require 'wire/templateexpression'

  module "wire/templateexpression"

  test "literals", ->
    deepEqual(parse("1"), ["1", []])
    deepEqual(parse("a"), ["a", ["a"]])
    deepEqual(parse("a.b.c"), ["a.b.c", ["a.b.c"]])
    deepEqual(parse('""'), ['""', []])
    deepEqual(parse('"abc d"'), ['"abc d"', []])
    deepEqual(parse('[1,  a,"c", d]'), ['[1, a, "c", d]', ["a", "d"]])
    deepEqual(parse('{a: 1,  b: "c", d: d}'), ['{a: 1, b: "c", d: d}', ["d"]])

  test "ifExpression", ->
    deepEqual(
      parse("if (1) yes else no"),
      ["if (1) { yes } else { no }", ["yes", "no"]])
    deepEqual(
      parse("if (1) yes else {no}"),
      ["if (1) { yes } else { no }", ["yes", "no"]])
    deepEqual(
      parse("if (1) {yes} else {no}"),
      ["if (1) { yes } else { no }", ["yes", "no"]])
    deepEqual(
      parse("if (1 +2) yes else no"),
      ["if (1 + 2) { yes } else { no }", ["yes", "no"]])
    deepEqual(
      parse("if (1 + 2) if (a) 1 else no"),
      ["if (1 + 2) { if (a) { 1 } else { no } }", ["a", "no"]])
    deepEqual(
      parse("if (1 + 2) { if (a) 1 } else no"),
      ["if (1 + 2) { if (a) { 1 } } else { no }", ["a", "no"]])

  test "callExpression", ->
    deepEqual(parse("a()"), ["a()", ["a"]])
    deepEqual(parse("a(1)"), ["a(1)", ["a"]])
    deepEqual(parse("a(1, b)"), ["a(1, b)", ["a", "b"]])
    deepEqual(parse("a(b(c))"), ["a(b(c))", ["a", "b", "c"]])
    deepEqual(parse("a.v(1, b)"), ["a.v(1, b)", ["a.v", "b"]])
    deepEqual(parse("a.v(1 + c, b)"), ["a.v(1 + c, b)", ["a.v", "c", "b"]])

  test "binExpression", ->
    deepEqual(parse("1 + 2"), ["1 + 2", []])
    deepEqual(parse("1+ 2"), ["1 + 2", []])
    deepEqual(parse("1 +2"), ["1 + 2", []])
    deepEqual(parse("1+2"), ["1 + 2", []])
    deepEqual(parse("1 + 2 + 3"), ["1 + 2 + 3", []])
